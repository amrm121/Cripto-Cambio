def create_btc_wallet
        usuario = current_user
        keys = Bitcoin::Key.generate
        usuario.pubkeybtc = keys.pub
        usuario.privkeybtc = keys.priv
        usuario.bitcoin = Bitcoin::pubkey_to_address(keys.pub)
        usuario.save
        @messages = '<div class="errorspeech">Seu endereço bitcoin: <font color="red">' + usuario.bitcoin + '</font><br>Sua chave privada: ' + keys.priv + '<p>Parabéns! Você acabou de criar o endereço acima e associá-lo a sua conta.</p> <p><j>Com ele, você poderá utilizar nossos serviços com maior praticidade, adicionando créditos ao nosso site apenas enviando bitcoins para o endereço em destaque!<br> Melhorando sua comodidade na aquisição de nossos serviços e agilidade na compra de produtos.</j></div>'
        render 'sessions/loginerror'
    end
    def create_ltc_wallet
        usuario = current_user
        Bitcoin.network = :litecoin
        keys = Bitcoin::Key.generate
        usuario.pubkeybtc = keys.pub
        usuario.privkeybtc = keys.priv
        usuario.litecoin = Bitcoin::pubkey_to_address(keys.pub)
        usuario.save
        @messages = '<div class="errorspeech">Seu endereço bitcoin: <font color="red">' + usuario.litecoin + '</font><br>Sua chave privada: ' + keys.priv + '<p>Parabéns! Você acabou de criar o endereço acima e associá-lo a sua conta.</p> <p><j>Com ele, você poderá utilizar nossos serviços com maior praticidade, adicionando créditos ao nosso site apenas enviando bitcoins para o endereço em destaque!<br> Melhorando sua comodidade na aquisição de nossos serviços e agilidade na compra de produtos.</j></div>'
        render 'sessions/loginerror'
    end
    def sign_java(priv_key,pub_key, carteira_type, to)
        value = (BigDecimal(params["valor"].gsub!(",","."),8) * 10000000).to_f.to_s
        carteira = Storage.find_by_endereco(params["endereco"])
        @amount = value
        @from = #Output da transação anterior
        @to = to
        @change = carteira.address #endereço de volta
        @sign = priv_key #privkey pra assinar
    end
   
    
    def withdrawal
        
        if params["commit"] == "Withdrawal"
            carteira = Storage.find_by_endereco(params["endereco"])
            @cart = carteira
            @messages = sign_transaction(carteira.privkey, carteira.pubkey, carteira.tipo, params['destino'])
            @messages << "<br> Bytesize: #{@messages.bytesize}"
            render 'sessions/loginerror'
            return
        end
    end
    
    #Funções de assinatura de transações
    def sign_transaction(pubkey,privkey,network,endereco)
        
        key1 = Bitcoin::Key.new(pubkey,privkey)
        
        value = (BigDecimal(params["valor"].gsub!(",","."),8) * 10000000).to_f.to_s
        if network == "ltc"
            Bitcoin.network = :litecoin
        elsif network == "btc"
            Bitcoin.network = :bitcoin
        elsif network == "doge"
            Bitcoin.network = :dogecoin
        end
        prev_tx = get_transactions(key1.addr,network)
        prev_tx_output_index = prev_tx["data"]["txs"][0]["output_no"]
        #prev_outputs = prev_tx["data"]["txs"][0]["txid"]
        
        tax = Bitcoin::Protocol::Tx.new
        prev_hash = Hash.new
        
        detail_hash = (detail_transactions(prev_tx["data"]["txs"][0]["txid"],network))["data"].to_hash
       # p detail_hash
        #prev_hash = Bitcoin::Protocol::Tx.from_hash((detail_transactions(prev_tx["data"]["txs"][0]["txid"],network))["data"].to_hash)
        prev_hash["in"] = detail_hash["inputs"]
        #converter em inteiro
        
        
        prev_hash["out"] = detail_hash["outputs"]
        
        prev_hash["in"].each do |h|
            h["input_no"] = h["input_no"].to_i
            h["from_output"]["output_no"] =  h["from_output"]["output_no"].to_i
            
        end
        #p detail_hash
        prev_hash["hash"] = detail_hash["txid"]
        prev_hash["ver"] = detail_hash["version"].to_i
        prev_hash["lock_time"] = detail_hash["locktime"].to_i
        prev_hash["size"] = detail_hash["size"].to_i
        prev_hash["tx_hex"] = detail_hash["tx_hex"]
        #p detail_hash
        p"\n"
        #p prev_hash
        #prev_tx_obj = Bitcoin::Protocol::Tx.from_hash(detail_hash)
        prev_tx_obj = Bitcoin::Protocol::Tx.new(detail_hash["hash"])
        prev_tx_obj.ver = prev_hash["ver"]
        prev_tx_obj.lock_time = prev_hash["lock_time"]
        prev_tx_obj.add_in prev_hash["in"]
        prev_tx_obj.add_out prev_hash["out"]
        #p prev_tx_obj.in[0]#.script_sig(prev_hash["in"][0]["script"])
        p "\n"
       # p "key publica gerada #{key1.pub}"
       # p "key publica original #{@cart.pubkey}"
       # p "chave privada #{key1.priv}"
       # p "Chave privada original #{@cart.privkey}"
       # p "Destino #{endereco}"
       # p "Carteira gerada: #{key1.addr}"
       # p "carteira original: #{@cart.endereco}"
        #montar inputs
        hash_in = Hash.new
        hash_in['previous_transaction_hash'] = prev_tx["data"]["txs"][0]["txid"]
        hash_in['output_index'] = prev_tx_output_index
        hash_in['script'] = prev_tx["data"]["txs"][0]["script_asm"]
        inputs = Bitcoin::Protocol::TxIn.new(@prev_out_hash = prev_tx["data"]["txs"][0]["txid"] )
        #inputs.prev_out = hash_in['previous_transaction_hash']
        inputs.prev_out_index = prev_tx_output_index
        
        inputs.script_sig = hash_in["script"]
        p inputs
        p "\n"
        p "\n"
        p "\n"
        p "\n"
        #montar outputs
        hash_out = Hash.new
        hash_out['value'] = value
        hash_out['scriptPubKey'] = Bitcoin::Script.to_address_script(endereco)
        p "endereco de destino: #{endereco}"
        outputs = Bitcoin::Protocol::TxOut.value_to_address(value.to_i, endereco)
        #output = Bitcoin::Protocol::TxOut.new
        #outputs = Bitcoin::Protocol::TxOut.from_hash(hash_out)
        #output.script {|s| s.recipient endereco }
        #output.value = value
        #outputs = Bitcoin::Protocol::TxOut.new
        #outputs.amount = value
        #script = Bitcoin::Script.to_address_script(endereco)
        #outputs.pk_script = script
        
        #inpute = Bitcoin::Protocol::TxIn.new(prev_tx["data"]["txs"][0]["txid"], prev_tx_output_index, 0)
        #p inpute
        p prev_tx_obj.binary_hash
        tax.add_in(Bitcoin::Protocol::TxIn.new)
        tax.in.each do |i|
            i.prev_out = hash_in["previous_transaction_hash"]  # previous transaction
            i.prev_out_index =  prev_tx_output_index  # index of previous output
            i.script = hash_in["script"] # Bitcoin::Key used to sign the input
        end
        #p tax.in[0]
        tax.add_out(outputs)
        
        saldo_total = (BigDecimal(consulta_saldo_cripto(network,key1.addr),8) * 100000000)
        if value.to_i <= saldo_total.to_i
            output_send2 = Bitcoin::Protocol::TxOut.value_to_address((saldo_total - value.to_i - 200000).to_i, key1.addr)
            #output_send2.pk_script = output_send2.script {|s| s.recipient endereco }
            #output_send2.value = (saldo - value - 170000).to_i
            tax.add_out(output_send2)
        end
        p tax
        #
        p "transação com inputs e outputs: \n"
        p "\n"
      
        #p "taxa em json #{tax.to_s}"
        #assinatura da tranção
        #controle de script
        
        #
        #p tax.in[0]
        #p prev_tx_obj
        #tax.in[0].prev_out = prev_tx_obj
        #tax.in[0].prev_out_index =  prev_tx_obj.in[0][0].prev_out_index
        
        sign_key = Bitcoin.open_key(key1.priv) #chave privada que libera os fundos
        
        #sig = Bitcoin.sign_data(sign_key, tax.signature_hash_for_input(0, prev_tx_obj.in[0])) #assinatura
        #tax.in[0].script_sig = Bitcoin::Script.binary_from_string(sign_key.public_key_hex)
        #tax.in[0].add_signature_pubkey_script(sig, sign_key.public_key_hex)
        
       # p tax.verify_input_signature(0, sig) == true
        #p new_tx
        puts "json:\n"
        puts tax.to_json # json
        puts "\nhex:\n"
        puts tax.to_payload.unpack("H*")[0] # hex binary
        
        create_tx(tax,prev_tx_obj, prev_tx_output_index, tax.out, sign_key, detail_hash["txid"])
        return tax.to_payload.unpack("H*")[0]
    end
    def create_tx(tx, prev_tx, prev_out_index, outputs, key = @key, prev_hash)
        tx.inputs {|i| i.prev_out prev_tx; i.prev_out_index prev_out_index; i.signature_key key }
        outputs.each do |value, key|
            tx.outputs {|o| o.value value; o.script {|s| s.recipient key.addr } }
        end
        new = tx.to_hash
        new["hash"] = nil
        new["in"][0]["prev_out"]["hash"] = prev_hash
        #p new
        novo_obj = Bitcoin::Protocol::Tx.binary_from_hash(new)
        p novo_obj.to_payload
    end
    def signature_hash_for_input(input_idx, subscript, hash_type=nil)
        # https://github.com/bitcoin/bitcoin/blob/e071a3f6c06f41068ad17134189a4ac3073ef76b/script.cpp#L834
        # http://code.google.com/p/bitcoinj/source/browse/trunk/src/com/google/bitcoin/core/Script.java#318
        # https://en.bitcoin.it/wiki/OP_CHECKSIG#How_it_works
        # https://github.com/bitcoin/bitcoin/blob/c2e8c8acd8ae0c94c70b59f55169841ad195bb99/src/script.cpp#L1058
        # https://en.bitcoin.it/wiki/OP_CHECKSIG
        data = nil
        @ver, @lock_time, @in, @out, @scripts = 1, 0, [], [], []
        @enable_bitcoinconsensus = !!ENV['USE_BITCOINCONSENSUS']
        parse_data_from_io(data) if data
        # Note: BitcoinQT checks if input_idx >= @in.size and returns 1 with an error message.
        # But this check is never actually useful because BitcoinQT would crash 
        # right before VerifyScript if input index is out of bounds (inside CScriptCheck::operator()()).
        # That's why we don't need to do such a check here.
        #
        # However, if you look at the case SIGHASH_TYPE[:single] below, we must 
        # return 1 because it's possible to have more inputs than outputs and BitcoinQT returns 1 as well.
        return "\x01".ljust(32, "\x00") if input_idx >= @in.size # ERROR: SignatureHash() : input_idx=%d out of range

        hash_type ||= SIGHASH_TYPE[:all]

        pin  = @in.map.with_index{|input,idx|
            if idx == input_idx
            subscript = subscript.out[ input.prev_out_index ].script if subscript.respond_to?(:out) # legacy api (outpoint_tx)
            input.to_payload(subscript)
            else
            case (hash_type & 0x1f)
            when SIGHASH_TYPE[:none];   input.to_payload("", "\x00\x00\x00\x00")
            when SIGHASH_TYPE[:single]; input.to_payload("", "\x00\x00\x00\x00")
            else;                       input.to_payload("")
            end
            end
        }
        
        pout = @out.map(&:to_payload)
        in_size, out_size = Protocol.pack_var_int(@in.size), Protocol.pack_var_int(@out.size)
        
        case (hash_type & 0x1f)
        when SIGHASH_TYPE[:none]
            pout = ""
            out_size = Protocol.pack_var_int(0)
        when SIGHASH_TYPE[:single]
            return "\x01".ljust(32, "\x00") if input_idx >= @out.size # ERROR: SignatureHash() : input_idx=%d out of range (SIGHASH_SINGLE)
            pout = @out[0...(input_idx+1)].map.with_index{|out,idx| (idx==input_idx) ? out.to_payload : out.to_null_payload }.join
            out_size = Protocol.pack_var_int(input_idx+1)
        end
        
        if (hash_type & SIGHASH_TYPE[:anyonecanpay]) != 0
            in_size, pin = Protocol.pack_var_int(1), [ pin[input_idx] ]
        end
        
        buf = [ [@ver].pack("V"), in_size, pin, out_size, pout, [@lock_time, hash_type].pack("VV") ].join
        Digest::SHA256.digest( Digest::SHA256.digest( buf ) )
    end
    #função de enviar transação
    def send_transaction(hex,network)
        hash = Hash.new
        hash["tx_hex"] = hex
        url = "https://chain.so/api/v2/send_tx/#{network}"
        p url
        uri = URI(url)
        http = Net::HTTP.new(uri.host, 443)
        http.use_ssl = true 
        request = Net::HTTP::Post.new(uri.path, {'Content-Type' =>'application/json'})
        request.body = hash.to_json
        response = http.request(request)
        puts response.body
        return true
    end